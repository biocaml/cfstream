open build/Common
open build/OCaml

.PHONY: lib test doc \
        install install_lib install_doc \
        uninstall uninstall_lib \
        clean distclean \
        print_config

################################################################################
# General Project Information
PROJECT = cfstream
VERSION = 1.2-dev
if $(test -e .git)
  GIT_COMMIT = $(shell git rev-parse HEAD)
  export
else
  GIT_COMMIT =
  export

LIB_NAME = $(PROJECT)
LIB_DESCRIPTION = Stream operations in the style of Core\'s API.
LIB_MODULES[] =
  CFStream_about
  CFStream_streamable
  CFStream_stream
  CFStream
LIB_PACKAGES = core

TEST_NAME = $(PROJECT)-test
TEST_MODULES[] = $(removesuffix $(basename $(ls src/test/test_*.ml)))
TEST_PACKAGES = $(LIB_PACKAGES) oUnit

.PHONY: foo
foo:
  echo $(LIB_MODULES)

################################################################################
# Directory and File Names
CONFIG_FILE = configure.om
DEFAULT_PREFIX=_build/usr

$(CONFIG_FILE):
  if $(not $(file-exists $(CONFIG_FILE)))
    echo "Generating default $@. Change as desired."
    echo "COMPILE_TEST = true" > $(CONFIG_FILE)
    echo "PREFIX = $(DEFAULT_PREFIX)" >> $(CONFIG_FILE)
  else
    echo "$@ exists. Will not change."

if $(file-exists $(CONFIG_FILE))
  include $(CONFIG_FILE)
  export

DefineCommandVars()

if $(not $(defined PREFIX))
  PREFIX = $(DEFAULT_PREFIX)
  export

if $(not $(defined BIN_DIR))
  BIN_DIR = $(PREFIX)/bin
  export

if $(not $(defined DOC_DIR))
  DOC_DIR = $(PREFIX)/doc
  export

if $(not $(defined COMPILE_TEST))
  COMPILE_TEST = true
  export

print_config:
  echo "COMPILE_TEST: $(COMPILE_TEST)"
  echo "PREFIX = $(PREFIX)"
  echo "BIN_DIR = $(BIN_DIR)"
  echo "DOC_DIR = $(DOC_DIR)"


################################################################################
# Build Parameters
USE_OCAMLFIND = true
if $(not $(OCAMLFIND_EXISTS))
   eprintln(Required package ocamlfind not found.)
   exit 1

NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = $(OCAMLC_EXISTS)

OCAMLFLAGS = -bin-annot -annot -warn-error P -thread
OCAMLCFLAGS =
OCAMLOPTFLAGS =
OCAML_LINK_FLAGS +=
OCAML_BYTE_LINK_FLAGS =
OCAML_NATIVE_LINK_FLAGS =
OCAMLFINDFLAGS =

.SUBDIRS: .
  mkdir -p _build/src/lib
  mkdir -p _build/src/test
  mkdir -p _build/doc
  vmount(-l, src/, _build/src)

  ##############################################################################
  # Library
  .SUBDIRS: _build/src/lib
    OCAMLPACKS[] = $(LIB_PACKAGES)

    CFStream_about.ml: :value: $(VERSION)
      echo '(** General information about this library. *)' > $@
      echo '' >> $@
      echo '(** Version: ["$(VERSION)"] *)' >> $@
      echo 'let version = "$(VERSION)"' >> $@
      echo '' >> $@
      echo '(** Git commit if known. *)' >> $@
      if $(equal $(GIT_COMMIT), $(EMPTY))
        echo 'let git_commit = None' >> $@
      else
        echo 'let git_commit = Some "$(GIT_COMMIT)"' >> $@

    META:
      echo "description = \"$(LIB_DESCRIPTION)\"" > $@
      echo "version = \"$(VERSION)\"" >> $@
      echo "archive(byte) = \"$(LIB_NAME).cma\"" >> $@
      echo "archive(native) = \"$(LIB_NAME).cmxa\"" >> $@
      echo "requires = \"$(LIB_PACKAGES)\"" >> $@

    lib: $(OCamlLibrary $(LIB_NAME), $(LIB_MODULES))

    .DEFAULT: lib META

    install_lib: $(LIB_NAME).cma $(LIB_NAME).cmxa META uninstall_lib
      ocamlfind install $(LIB_NAME) META \
        *.cm[iox] *.o $(LIB_NAME).cma $(LIB_NAME).cmxa *.a

    uninstall_lib:
      ocamlfind remove $(PROJECT)


  ##############################################################################
  # Tests
  .SUBDIRS: _build/src/test
    OCAML_LIBS = ../lib/$(LIB_NAME)
    OCAMLINCLUDES += $(dir ../lib/)
    OCAMLPACKS[] = $(TEST_PACKAGES)

    %.ml: ../lib/$(LIB_NAME).cma

    test: $(OCamlProgram $(TEST_NAME), $(TEST_MODULES))

    if $(COMPILE_TEST)
      echo "Building test"
      .DEFAULT: test


  ##############################################################################
  # Documentation
  .SUBDIRS: _build/doc
    api/index.html: lib
      rm -rf api
      mkdir api
      ocamlfind ocamldoc \
        $(OCAMLFINDFLAGS) \
        -thread \
        -package $(concat \,, $(LIB_PACKAGES)) \
        -charset UTF-8 \
        -d api \
        -t "CFStream $(VERSION)" \
        -keep-code \
        -colorize-code \
        -sort \
        -html \
        -I ../lib \
        ../lib/*.ml ../lib/*.mli

    doc: api/index.html

  install_doc: doc
    echo "Installing documentation in $(DOC_DIR)"
    rm -rf $(DOC_DIR)
    mkdir -p $(DOC_DIR)
    cp -r _build/doc/api $(DOC_DIR)


################################################################################
# Primary Commands
install: install_lib
uninstall: uninstall_lib

clean:
  rm -rf _build

distclean: clean
  rm -rf OMakeroot.omc .omakedb .omakedb.lock configure.omc
